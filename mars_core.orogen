name 'simulation'

using_library "mars"
using_library "multisim-plugin"

import_types_from "tasks/MarsControl.hpp"


# Core orogen module that brings up the mars simulation and
# makes it accessible as a orogen module
# use subclassing to derive robot specific modules, e.g.
#
# task_context 'RobotSimulation' do
#         subclasses 'simulation::Mars'
# end

task_context "Mars" do
	needs_configuration
	
	property('config_dir','/std/string').
	    doc('the full path to the main configuration folder')

	property('resource_dir','/std/string').
	    doc('the full path to the main resource directory, will be used as base for any defaults for other *_path')

	property('stuff_path', '/std/string').
	    doc('The full path to the stuff directory')

	property('gui_path', '/std/string').
	    doc('The full path to the gui directory')

	property('tmp_path', '/std/string').
	    doc('The full path to the tmp directory')

	property('save_path', '/std/string').
	    doc('The full path to the tmp directory')

	property('plugin_path', '/std/string').
	    doc('The full path to the tmp directory')

	property('debug_path', '/std/string').
	    doc('The full path to the tmp directory')
 
	property('distributed_simulation', 'bool').
	    doc('switch to active the distributed simulation if needed')

	property('enable_gui', 'bool').
	    doc('start the simulation graphical interface with this module')

        # Add a task context
        # operation('addPlugin').
        #       returns('int').
        #       argument('taskcontext', '/
        # method addPlugin(input: TaskContext ) return bool
        # method removePlugin(input: TaskContext) return bool

        input_port('control_action', '/simulation/Control')
end

deployment "simulation" do
	add_default_logger
        sim = task('mars_simulation', 'simulation::Mars')
end



